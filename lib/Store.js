// Generated by CoffeeScript 1.3.1
(function() {
  var Backbone, Store, pg, util, uuid;

  Backbone = require("backbone");

  util = require("util");

  pg = require("pg");

  uuid = require("node-uuid");

  Store = (function() {

    Store.name = 'Store';

    function Store(connection) {
      this.connection = connection;
    }

    Store.prototype.read = function(model, options) {
      var clause, clauses, field, fields, having, key, obj, order, orderBy, query, table, val, values, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _m, _n, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6,
        _this = this;
      table = model.table || new model.model().table;
      query = "SELECT %s FROM %s %s";
      values = [];
      clauses = [];
      fields = [];
      if (model instanceof Backbone.Model && model.get("id")) {
        values.push(model.get("id"));
        clauses.push(util.format("%s.id = $%d", table, values.length));
      }
      if (options.filter) {
        _ref = options.filter;
        for (key in _ref) {
          val = _ref[key];
          obj = {};
          obj[key] = val;
          values.push(this.toHstore(obj));
          clauses.push(util.format("%s.doc @> $%d", table, values.length));
        }
      }
      if (options.hasAny) {
        values.push(JSON.stringify(options.hasAny).replace(/\[/g, "{").replace(/\]/g, "}"));
        clauses.push(util.format("%s.doc ?| $%d", table, values.length));
      }
      if (options.hasAll) {
        values.push(JSON.stringify(options.hasAll).replace(/\[/g, "{").replace(/\]/g, "}"));
        clauses.push(util.format("%s.doc ?& $%d", table, values.length));
      }
      if (options.clauses) {
        _ref1 = options.clauses;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          clause = _ref1[_i];
          values.push(clause[1]);
          clauses.push(util.format(clause[0], util.format("$%d", values.length)));
        }
      }
      if (util.isArray(options.fields)) {
        fields.push(util.format("%s.id", table));
        _ref2 = options.fields;
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
          field = _ref2[_j];
          fields.push(util.format("%s.doc->'%s' as %s", table, field, field));
        }
      }
      if (options.rawFields) {
        _ref3 = options.rawFields;
        for (_k = 0, _len2 = _ref3.length; _k < _len2; _k++) {
          field = _ref3[_k];
          fields.push(field);
        }
      }
      if (fields.length < 1) {
        fields = [util.format("%s.*", table)];
      }
      clauses = (clauses.length > 0 ? "WHERE " + clauses.join(" AND ") : "");
      query = util.format(query, fields.join(","), table, clauses);
      if (util.isArray(options.groupBy)) {
        query += util.format(" GROUP BY %s", options.groupBy.join(", "));
        if (util.isArray(options.having)) {
          having = " HAVING " + options.having[0].replace(/\$\d+/g, "$%d");
          if (util.isArray(options.having[1])) {
            _ref4 = options.having[1];
            for (_l = 0, _len3 = _ref4.length; _l < _len3; _l++) {
              val = _ref4[_l];
              values.push(val);
              having = util.format(having, values.length);
            }
          }
          query += having;
        }
      }
      orderBy = [];
      if (util.isArray(options.orderBy)) {
        _ref5 = options.orderBy;
        for (_m = 0, _len4 = _ref5.length; _m < _len4; _m++) {
          val = _ref5[_m];
          field = util.isArray(val) ? val[0] : val;
          order = util.isArray(val) ? val[1] : 'ASC';
          values.push(util.format("%s.doc->'%s' %s", table, field, order));
          orderBy.push(util.format("$%d", values.length));
        }
      }
      if (util.isArray(options.rawOrderBy)) {
        _ref6 = options.rawOrderBy;
        for (_n = 0, _len5 = _ref6.length; _n < _len5; _n++) {
          val = _ref6[_n];
          values.push(val);
          orderBy.push(util.format("$%d", values.length));
        }
      }
      if (orderBy.length > 0) {
        query += util.format(" ORDER BY %s", orderBy.join(", "));
      }
      if (options.limit != null) {
        values.push(options.limit);
        query = query + util.format(" LIMIT $%d", values.length);
      }
      if (options.offset != null) {
        values.push(options.offset);
        query = query + util.format(" OFFSET $%d", values.length);
      }
      return pg.connect(this.connection, function(err, client) {
        if (err) {
          return options.error(err);
        }
        return client.query(query, values, function(err, results) {
          var data, field, object, row;
          if (err) {
            return options.error(err);
          }
          if (model instanceof Backbone.Collection && (results.rows != null)) {
            data = (function() {
              var _len6, _len7, _o, _p, _ref7, _ref8, _results;
              _ref7 = results.rows;
              _results = [];
              for (_o = 0, _len6 = _ref7.length; _o < _len6; _o++) {
                row = _ref7[_o];
                object = {};
                if (options.fields && util.isArray(options.fields)) {
                  _ref8 = options.fields;
                  for (_p = 0, _len7 = _ref8.length; _p < _len7; _p++) {
                    field = _ref8[_p];
                    object[field] = row[field.toLowerCase()];
                  }
                } else if (row.doc) {
                  object = this.toObject(row.doc);
                } else {
                  object = row;
                }
                object.id = row.id;
                _results.push(object);
              }
              return _results;
            }).call(_this);
            return options.success(data);
          } else if (model instanceof Backbone.Model && (results.rows[0] != null)) {
            object = _this.toObject(results.rows[0].doc);
            return options.success(object);
          } else {
            return options.success(null);
          }
        });
      });
    };

    Store.prototype.create = function(model, options) {
      var doc, id, query;
      query = util.format("INSERT INTO %s (id, doc) VALUES ($1, $2)", model.table);
      doc = this.toHstore(model.toJSON());
      id = uuid.v4();
      return pg.connect(this.connection, function(err, client) {
        if (err) {
          return options.error(err);
        }
        return client.query(query, [id, doc], function(err, info) {
          if (err) {
            return options.error(err);
          }
          model.id = id;
          return options.success(model.toJSON());
        });
      });
    };

    Store.prototype.update = function(model, options) {
      var object, query, values;
      query = util.format("UPDATE %s SET doc = $1 WHERE id = $2", model.table);
      values = [];
      object = model.toJSON();
      delete object.id;
      values.push(this.toHstore(object));
      values.push(model.id);
      return pg.connect(this.connection, function(err, client) {
        if (err) {
          return options.error(err);
        }
        return client.query(query, values, function(err, info) {
          if (err) {
            return options.error(err);
          }
          return options.success(model.toJSON());
        });
      });
    };

    Store.prototype["delete"] = function(model, options) {
      var object, query, values;
      query = util.format("DELETE FROM %s WHERE id = $1", model.table);
      values = [model.id];
      object = model.toJSON();
      return pg.connect(this.connection, function(err, client) {
        if (err) {
          return options.error(err);
        }
        return client.query(query, values, function(err, info) {
          if (err) {
            return options.error(err);
          }
          return options.success(model.toJSON());
        });
      });
    };

    Store.prototype.createTable = function(table, callback) {
      var query;
      query = util.format("CREATE TABLE %s ( id uuid, doc hstore, CONSTRAINT %s_pkey PRIMARY KEY (id) ); CREATE INDEX %s_doc_idx_gist ON %s USING gist(doc);", table, table, table, table);
      return pg.connect(this.connection, function(err, client) {
        return client.query(query, callback);
      });
    };

    Store.prototype.toHstore = function(object) {
      var elements, key, val;
      elements = (function() {
        var _results;
        _results = [];
        for (key in object) {
          val = object[key];
          switch (typeof val) {
            case "boolean":
              val = (val ? this.quoteAndEscape("true") : this.quoteAndEscape("false"));
              break;
            case "object":
              val = (val ? this.quoteAndEscape(JSON.stringify(val)) : "NULL");
              break;
            case "null":
              val = "NULL";
              break;
            case "number":
              val = (isFinite(val) ? this.quoteAndEscape(JSON.stringify(val)) : "NULL");
              break;
            default:
              val = this.quoteAndEscape(val);
          }
          _results.push("\"" + key + "\"=>" + val);
        }
        return _results;
      }).call(this);
      return elements.join(", ");
    };

    Store.prototype.quoteAndEscape = function(string) {
      return "\"" + String(string).replace(/"/g, "\\\"") + "\"";
    };

    Store.prototype.toObject = function(string) {
      var elements, key, matches, object, val, value, _i, _len;
      elements = string.replace(/", "/, "\"\u0000 \"").split(/\u0000 /);
      object = {};
      for (_i = 0, _len = elements.length; _i < _len; _i++) {
        val = elements[_i];
        matches = val.match(/^"(.+?)"\s*=>\s*"?(.+?)"?$/);
        key = matches[1];
        value = matches[2].replace(/\\"/g, "\"");
        try {
          object[key] = JSON.parse(value);
        } catch (e) {
          object[key] = value;
        }
        if (object[key] === "NULL") {
          object[key] = null;
        }
      }
      return object;
    };

    return Store;

  })();

  module.exports = Store;

}).call(this);
